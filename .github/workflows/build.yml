# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Android build

on:
  push:
    branches: 
      - '*'

jobs:
  apk:
    name: Generate debug APK
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Build web
        run: npm run build
      
      - name: Setup JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      
      - name: Add android into capacitor
        run: |
         npx cap init
         npx cap add android
      
      - name: Sync android capacitor
        run: npx cap sync
      
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Build APKs
        working-directory: ./android
        run: |
          ./gradlew assembleDebug --stacktrace
          ./gradlew assemble
          ./gradlew bundleRelease

      - name: Generate and sign Java keytool
        if: runner.os != 'windows'
        env:
         MY_ZIP_PASSWORD: ${{ secrets.MY_ZIP_PASSWORD }}
         BUILD_TOOLS: ${{env.BUILD_TOOLS}}
        run: |
         cd $GITHUB_WORKSPACE
         echo "Get latest Android build tool version"
         export BUILD_TOOLS=$(ls $ANDROID_SDK_ROOT/build-tools | tail -1)
         echo "BUILD_TOOLS=$BUILD_TOOLS"
         echo "BUILD_TOOLS=$BUILD_TOOLS" >> $GITHUB_ENV
         if [ ! -n "${MY_ZIP_PASSWORD}" ]; then
            export MY_ZIP_PASSWORD="Test123"
         fi
            echo "Signing our apk"
            mkdir -p keys
            echo "Generate a Private Certificate by keytool"
            echo "https://developer.android.com/studio/build/building-cmdline#sign_cmdline"
            keytool -genkeypair -v -noprompt \
             -storetype PKCS12 \
             -alias my-android-release-key \
             -keystore keys/my-android-release-key.keystore \
             -keyalg RSA -keysize 2048 -validity 10000 \
             -storepass ${MY_ZIP_PASSWORD} \
             -keypass ${MY_ZIP_PASSWORD} \
             -dname "CN=nguoianphu.com, OU=NA, O=Company, L=HOCHIMINH, S=HOCHIMINH, C=VN"
            echo "Export the certificate for the upload key to PEM format"
            keytool -export -rfc -v -noprompt \
                -storepass ${MY_ZIP_PASSWORD} \
                -keypass ${MY_ZIP_PASSWORD} \
                -keystore keys/my-android-release-key.keystore \
                -alias my-android-release-key \
                -file keys/my-android-release-upload-certificat.pem
            echo "Sign the APK with the key we just created"
            # cd $ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS
            echo "Align the unsigned APK using zipalign"
            .${ANDROID_SDK_ROOT}/build-tools/$BUILD_TOOLS/zipalign -v 4 \
                app/build/outputs/apk/release/app-release-unsigned.apk \
                app/build/outputs/apk/release/app-release-unsigned-aligned.apk
            echo "Sign your APK with your private key using apksigner"
            .${ANDROID_SDK_ROOT}/build-tools/$BUILD_TOOLS/apksigner sign \
                --ks keys/my-android-release-key.keystore \
                --ks-key-alias my-android-release-key \
                --ks-pass pass:${MY_ZIP_PASSWORD} \
                --key-pass pass:${MY_ZIP_PASSWORD} \
                --out app/build/outputs/apk/release/app-release.apk \
                app/build/outputs/apk/release/app-release-unsigned-aligned.apk
            echo "Verify that your APK is signed \
                    to confirm that an APK's signature \
                    will be verified successfully \
                    on all versions of the Android platform supported by the APK"
            .${ANDROID_SDK_ROOT}/build-tools/$BUILD_TOOLS/apksigner verify --verbose --print-certs app/build/outputs/apk/release/app-release.apk
            cd $GITHUB_WORKSPACE
            echo "Sign Android App Bundle by jarsigner"
            echo "https://medium.com/androiddevelopers/building-your-first-app-bundle-bbcd228bf631"
            jarsigner -storepass ${MY_ZIP_PASSWORD} \
                -keypass ${MY_ZIP_PASSWORD} \
                -keystore keys/my-android-release-key.keystore \
                 app/build/outputs/bundle/release/app-release.aab my-android-release-key
            echo "zip keys and certificates with password"
            7z a -tzip -p${MY_ZIP_PASSWORD} app/build/outputs/apk/release/keys.zip -r keys

      - uses: actions/upload-artifact@v2
        with:
          name: allApksAab
          path: |
            ./android/app/build/outputs/apk/debug/
            ./android/app/build/outputs/apk/release/
            ./android/app/build/outputs/bundle/release/
      
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties